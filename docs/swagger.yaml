basePath: /api/v1
definitions:
  common.JsonErrorResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  common.JsonFailedValidationResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/common.ValidationError'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  common.JsonSuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  common.ValidationError:
    properties:
      condition:
        type: string
      error:
        type: string
      key:
        type: string
    type: object
  requests.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 4
        type: string
    required:
    - email
    - password
    type: object
  requests.RegisterRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        minLength: 4
        type: string
      role:
        allOf:
        - $ref: '#/definitions/requests.Role'
        enum:
        - admin
        - member
    required:
    - email
    - firstname
    - lastname
    - password
    type: object
  requests.Role:
    enum:
    - admin
    - member
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleMember
host: localhost:8080
info:
  contact:
    email: ryanwanjie1@gmail.com
    name: Wanjie-Ryan
    url: https://github.com/Wanjie-Ryan
  description: Library Management System API with JWT auth, Redis cache, and MySQL.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: LMS API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns access & refresh tokens
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: accessToken, refreshToken, user
          schema:
            $ref: '#/definitions/common.JsonSuccessResponse'
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/common.JsonErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.JsonErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.JsonFailedValidationResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/common.JsonErrorResponse'
      summary: Login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: Register payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.JsonSuccessResponse'
        "400":
          description: Invalid payload / user exists
          schema:
            $ref: '#/definitions/common.JsonErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.JsonFailedValidationResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/common.JsonErrorResponse'
      summary: Register user
      tags:
      - Auth
  /profile/lookup:
    get:
      description: Returns the current user's profile
      produces:
      - application/json
      responses:
        "200":
          description: user
          schema:
            $ref: '#/definitions/common.JsonSuccessResponse'
        "401":
          description: Not authorized
          schema:
            $ref: '#/definitions/common.JsonErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/common.JsonErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/common.JsonErrorResponse'
      security:
      - BearerAuth: []
      summary: Get profile
      tags:
      - Profile
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Enter the token with the `Bearer ` prefix, e.g. "Bearer {token}"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
